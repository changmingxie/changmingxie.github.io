{
  "filename": "api.md",
  "__html": "<h1 id=\"api%E6%94%AF%E6%8C%81\">API支持 <a class=\"header-anchor\" href=\"#api%E6%94%AF%E6%8C%81\">#</a></h1>\n<h2 id=\"%E6%A0%B8%E5%BF%83%E7%B1%BB\">核心类 <a class=\"header-anchor\" href=\"#%E6%A0%B8%E5%BF%83%E7%B1%BB\">#</a></h2>\n<h3 id=\"configurabletransactionaspect\">ConfigurableTransactionAspect <a class=\"header-anchor\" href=\"#configurabletransactionaspect\">#</a></h3>\n<p>分布式事务切面，用于对方法注解@Compensable的拦截，具体拦截逻辑见<strong>CompensableTransactionInterceptor</strong></p>\n<h3 id=\"configurablecoordinatoraspect\">ConfigurableCoordinatorAspect <a class=\"header-anchor\" href=\"#configurablecoordinatoraspect\">#</a></h3>\n<p>事务协调切面，用于对方法注解@Compensable和@EnableTcc的拦截，具体拦截逻辑见<strong>ResourceCoordinatorInterceptor</strong><br>\n<strong>注意</strong>：当遇到@Compensable时，切面执行顺序为ConfigurableTransactionAspect&gt;ConfigurableCoordinatorAspect</p>\n<h3 id=\"compensabletransactioninterceptor\">CompensableTransactionInterceptor <a class=\"header-anchor\" href=\"#compensabletransactioninterceptor\">#</a></h3>\n<p>对注解@Compensable进行拦截，实现对主事务、分支事务的try-confirm-cancel流程。</p>\n<h3 id=\"resourcecoordinatorinterceptor\">ResourceCoordinatorInterceptor <a class=\"header-anchor\" href=\"#resourcecoordinatorinterceptor\">#</a></h3>\n<p>对注解@Compensable或者@EnableTcc进行拦截，实现事件及参与方存储。</p>\n<h3 id=\"transactioncontext\">TransactionContext <a class=\"header-anchor\" href=\"#transactioncontext\">#</a></h3>\n<p>事件上下文，分支事务场景用到。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">TransactionContext</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Serializable</span> </span>{\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">long</span> serialVersionUID = -<span class=\"hljs-number\">8199390103169700387L</span>;\n    <span class=\"hljs-comment\">// 取自上一级事件参与方的事务ID，作为当前分支事件ID</span>\n    <span class=\"hljs-keyword\">private</span> Xid xid;\n    <span class=\"hljs-comment\">// 主事件ID</span>\n    <span class=\"hljs-keyword\">private</span> Xid rootXid;\n    <span class=\"hljs-comment\">// 主事件Domain</span>\n    <span class=\"hljs-keyword\">private</span> String rootDomain;\n    <span class=\"hljs-comment\">// 事件状态</span>\n    <span class=\"hljs-keyword\">private</span> TransactionStatus status = TransactionStatus.TRYING;\n    <span class=\"hljs-comment\">// 参与方状态</span>\n    <span class=\"hljs-keyword\">private</span> ParticipantStatus participantStatus = ParticipantStatus.TRYING;\n    <span class=\"hljs-comment\">// 扩展字段</span>\n    <span class=\"hljs-keyword\">private</span> Map&lt;String, String&gt; attachments = <span class=\"hljs-keyword\">new</span> ConcurrentHashMap&lt;String, String&gt;();\n\n}\n\n</code></pre>\n<h3 id=\"transaction\">Transaction <a class=\"header-anchor\" href=\"#transaction\">#</a></h3>\n<p>事件，每个事务都会产生一个事件。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Transaction</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Serializable</span> </span>{\n    <span class=\"hljs-comment\">// 参与方列表</span>\n    <span class=\"hljs-keyword\">private</span> List&lt;Participant&gt; participants = <span class=\"hljs-keyword\">new</span> ArrayList&lt;Participant&gt;();\n    <span class=\"hljs-comment\">// 预留字段</span>\n    <span class=\"hljs-keyword\">private</span> Map&lt;String, Object&gt; attachments = <span class=\"hljs-keyword\">new</span> ConcurrentHashMap&lt;String, Object&gt;();\n    <span class=\"hljs-comment\">// 事件ID</span>\n    <span class=\"hljs-keyword\">private</span> Xid xid;\n    <span class=\"hljs-comment\">// 主事件ID，当前事件为主事件时，xid = rootId</span>\n    <span class=\"hljs-keyword\">private</span> Xid rootXid;\n    <span class=\"hljs-comment\">// 主domain</span>\n    <span class=\"hljs-keyword\">private</span> String rootDomain;\n    <span class=\"hljs-comment\">// 事件类型，主事件-ROOT(1)，分支事件-BRANCH(2)</span>\n    <span class=\"hljs-keyword\">private</span> TransactionType transactionType;\n    <span class=\"hljs-comment\">// 事件状态，TRYING(1), CONFIRMING(2), CANCELLING(3), TRY_SUCCESS(11), TRY_FAILED(12);</span>\n    <span class=\"hljs-keyword\">private</span> TransactionStatus status;\n    <span class=\"hljs-comment\">// 事件创建时间</span>\n    <span class=\"hljs-keyword\">private</span> Date createTime = <span class=\"hljs-keyword\">new</span> Date();\n    <span class=\"hljs-comment\">// 事件更新时间</span>\n    <span class=\"hljs-keyword\">private</span> Date lastUpdateTime = <span class=\"hljs-keyword\">new</span> Date();\n    <span class=\"hljs-comment\">// 事件重试次数，记录事件补偿的次数</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">volatile</span> <span class=\"hljs-keyword\">int</span> retriedCount = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-comment\">// 版本号</span>\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">long</span> version = <span class=\"hljs-number\">0L</span>;\n    \n    <span class=\"hljs-comment\">// 添加参与方</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">enlistParticipant</span><span class=\"hljs-params\">(Participant participant)</span> </span>{\n        participants.add(participant);\n    }\n    <span class=\"hljs-comment\">// 执行事件commit操作</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">commit</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">for</span> (Participant participant : participants) {\n            <span class=\"hljs-keyword\">if</span> (!participant.getStatus().equals(ParticipantStatus.CONFIRM_SUCCESS)) {\n                participant.commit();\n                participant.setStatus(ParticipantStatus.CONFIRM_SUCCESS);\n            }\n        }\n    }\n\n    <span class=\"hljs-comment\">// 执行事件rollback操作</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">rollback</span><span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">for</span> (Participant participant : participants) {\n            <span class=\"hljs-keyword\">if</span> (!participant.getStatus().equals(ParticipantStatus.CANCEL_SUCCESS)) {\n                participant.rollback();\n                participant.setStatus(ParticipantStatus.CANCEL_SUCCESS);\n            }\n        }\n    }\n\n}\n\n</code></pre>\n<h3 id=\"participant\">Participant <a class=\"header-anchor\" href=\"#participant\">#</a></h3>\n<p>参与方，一个事件有多个参与方。</p>\n<pre><code class=\"language-java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Participant</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Serializable</span> </span>{\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">long</span> serialVersionUID = <span class=\"hljs-number\">4127729421281425247L</span>;\n    <span class=\"hljs-comment\">// 主事件ID</span>\n    <span class=\"hljs-keyword\">private</span> Xid rootXid; \n    <span class=\"hljs-comment\">// 主事件Domain</span>\n    <span class=\"hljs-keyword\">private</span> String rootDomain; \n    <span class=\"hljs-comment\">// 参与方事件ID，分支事务时，作为目标分支事务的事件ID</span>\n    <span class=\"hljs-keyword\">private</span> Xid xid; \n    <span class=\"hljs-comment\">// 方法调用上下文，执行confirm或cancel时用到</span>\n    <span class=\"hljs-keyword\">private</span> InvocationContext invocationContext; \n    <span class=\"hljs-comment\">// TRYING(1), CONFIRMING(2), CANCELLING(3), TRY_SUCCESS(11), TRY_FAILED(12), CONFIRM_SUCCESS(21), CANCEL_SUCCESS(31);</span>\n    <span class=\"hljs-keyword\">private</span> ParticipantStatus status = ParticipantStatus.TRYING; \n\n    <span class=\"hljs-comment\">// rollback操作，执行参与方cancel流程</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">rollback</span><span class=\"hljs-params\">()</span> </span>{\n        Terminator.invoke(<span class=\"hljs-keyword\">new</span> TransactionContext(rootDomain, rootXid, xid, TransactionStatus.CANCELLING, status), <span class=\"hljs-keyword\">new</span> Invocation(invocationContext.getCancelMethodName(), invocationContext), transactionContextEditorClass);\n    }\n    <span class=\"hljs-comment\">// commit操作，执行参与方confirm流程</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">commit</span><span class=\"hljs-params\">()</span> </span>{\n        Terminator.invoke(<span class=\"hljs-keyword\">new</span> TransactionContext(rootDomain, rootXid, xid, TransactionStatus.CONFIRMING, status), <span class=\"hljs-keyword\">new</span> Invocation(invocationContext.getConfirmMethodName(), invocationContext), transactionContextEditorClass);\n    }\n\n}\n\n</code></pre>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">// 执行confirm或cancel时反射调用时用到</span>\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">InvocationContext</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title\">Serializable</span> </span>{\n    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">long</span> serialVersionUID = -<span class=\"hljs-number\">7969140711432461165L</span>;\n    <span class=\"hljs-keyword\">private</span> Class targetClass;          <span class=\"hljs-comment\">// 事务调用的目标类</span>\n    <span class=\"hljs-keyword\">private</span> String confirmMethodName;   <span class=\"hljs-comment\">// confirm方法名</span>\n    <span class=\"hljs-keyword\">private</span> String cancelMethodName;    <span class=\"hljs-comment\">// cancel方法名</span>\n    <span class=\"hljs-keyword\">private</span> Class[] parameterTypes;     <span class=\"hljs-comment\">// 参数类型列表</span>\n    <span class=\"hljs-keyword\">private</span> Object[] args;              <span class=\"hljs-comment\">// 参数列表</span>\n}\n</code></pre>\n<h2 id=\"%E6%A0%B8%E5%BF%83%E6%B3%A8%E8%A7%A3\">核心注解 <a class=\"header-anchor\" href=\"#%E6%A0%B8%E5%BF%83%E6%B3%A8%E8%A7%A3\">#</a></h2>\n<h3 id=\"%40compensable\">@Compensable <a class=\"header-anchor\" href=\"#%40compensable\">#</a></h3>\n<p>此注解放在try方法上，用于定义tcc的执行逻辑，即try-confirm-cancel三阶段的实现，<strong>特别注意</strong>：confirm和cancel方法参数要与try保持一致<br>\n<strong>属性说明</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"><div style=\"width:50px\">参数名</div></th>\n<th style=\"text-align:left\"><div style=\"width:200px\">含义</div></th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">可选值</th>\n<th style=\"text-align:left\">默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">propagation</td>\n<td style=\"text-align:left\">传播方式，预留字段，暂时没用到</td>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">confirmMethod</td>\n<td style=\"text-align:left\">confirm方法名</td>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">cancelMethod</td>\n<td style=\"text-align:left\">cancel方法名</td>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">asyncConfirm</td>\n<td style=\"text-align:left\">异步confirm</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">默认为false</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">asyncCancel</td>\n<td style=\"text-align:left\">异步cancel</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">默认为false</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"%40enabletcc\">@EnableTcc <a class=\"header-anchor\" href=\"#%40enabletcc\">#</a></h3>\n<p>此注解用于声明tcc接口，用于远程调用时传递事件上下文(TransactionContext)</p>\n<h3 id=\"%40uniqueidentity\">@UniqueIdentity <a class=\"header-anchor\" href=\"#%40uniqueidentity\">#</a></h3>\n<p>此注解作用于方法参数上，参数一般为订单号，可保证同一个订单并发请求是只产生一个事件，第二个请求时会报异常。<br>\n使用可参考如下：</p>\n<pre><code class=\"language-java\">    <span class=\"hljs-meta\">@Compensable</span>(confirmMethod = <span class=\"hljs-string\">\"confirmMakePayment\"</span>, cancelMethod = <span class=\"hljs-string\">\"cancelMakePayment\"</span>, asyncConfirm = <span class=\"hljs-keyword\">false</span>)\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">makePayment</span><span class=\"hljs-params\">(@UniqueIdentity String orderNo)</span> </span>{\n        System.out.println(<span class=\"hljs-string\">\"order try make payment called.time seq:\"</span> + DateFormatUtils.format(Calendar.getInstance(), <span class=\"hljs-string\">\"yyyy-MM-dd HH:mm:ss\"</span>));\n\n        Order order = orderRepository.findByMerchantOrderNo(orderNo);\n\n        String result = capitalTradeOrderService.record(buildCapitalTradeOrderDto(order));\n        String result2 = redPacketTradeOrderService.record(buildRedPacketTradeOrderDto(order));\n    }\n</code></pre>\n",
  "link": "/zh-cn/docs/tutorial/api.html",
  "meta": {}
}