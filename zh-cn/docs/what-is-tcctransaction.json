{
  "filename": "what-is-tcctransaction.md",
  "__html": "<h1 id=\"tcc-transaction%E6%98%AF%E4%BB%80%E4%B9%88\">TCC-TRANSACTION是什么 <a class=\"header-anchor\" href=\"#tcc-transaction%E6%98%AF%E4%BB%80%E4%B9%88\">#</a></h1>\n<p>TCC-TRANSACTION是一款开源的微服务架构下的TCC型分布式事务解决方案，致力于提供高性能和简单易用的分布式事务服务。</p>\n<ul>\n<li>Try: 尝试执行业务，完成所有业务检查（一致性），预留必须业务资源（准隔离性）</li>\n<li>Confirm: 确认执行业务，不作任何业务检查，只使用Try阶段预留的业务资源，满足幂等性</li>\n<li>Cancel: 取消执行业务，释放Try阶段预留的业务资源，满足幂等性</li>\n</ul>\n<h2 id=\"%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%B8%AD%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E9%97%AE%E9%A2%98\">微服务架构中分布式事务问题 <a class=\"header-anchor\" href=\"#%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E4%B8%AD%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E9%97%AE%E9%A2%98\">#</a></h2>\n<p>随着传统的单体架构微服务化，原本单体架构中不同模块，被拆分为若干个功能简单、松耦合的服务。<br>\n系统微服务化后，内部可能需要调用多个服务并操作多个数据库实现，服务调用的分布式事务问题变的非常突出。<br>\n比如支付退款场景需要从各分账方退回平台收益户(退分账)，再退还给付款方。其中<strong>退分账</strong>阶段，\n涉及从多个分账方(商家1收益户，商家2收益户，商家3收益户，平台手续费账户)扣款，这些账户分布在不同数据库，\n比如商家3收益户扣款失败，其他成功扣款需要回滚，这里需要分布式事务保证一致性。\n<img src=\"./img/tcc_use_at_refund.jpg\" alt=\"支付退款流程\"></p>\n<h2 id=\"%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3\">如何解决 <a class=\"header-anchor\" href=\"#%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3\">#</a></h2>\n<p>如何解决上面<strong>退分账</strong>中分布式事务问题呢？\n选择使用tcc-transaction框架，执行流程如下：</p>\n<ul>\n<li>Try:<br>\n商家1收益户-&gt;冻结分账金额<br>\n商家2收益户-&gt;冻结分账金额<br>\n商家3收益户-&gt;冻结分账金额<br>\n平台手续费-&gt;冻结手续费</li>\n<li>Try成功 =&gt; Confirm:<br>\n商家1收益户-&gt;扣除分账金额<br>\n商家2收益户-&gt;扣除分账金额<br>\n商家3收益户-&gt;扣除分账金额<br>\n平台手续费-&gt;扣除手续费<br>\n平台收益户-&gt; 增加金额(总分账金额+手续费)</li>\n<li>Try失败 =&gt; Cancel:<br>\n商家1收益户-&gt;解冻分账金额<br>\n商家2收益户-&gt;解冻分账金额<br>\n商家3收益户-&gt;解冻分账金额<br>\n平台手续费-&gt;解冻手续费</li>\n</ul>\n<h2 id=\"%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86\">工作原理 <a class=\"header-anchor\" href=\"#%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86\">#</a></h2>\n<p><img src=\"/img/tcc/tcc-invoke-all2.jpg\" alt=\"TCC原理\"></p>\n<ul>\n<li>第一阶段：主业务服务A，经过事务拦截器，分别调用所有从业务的 try 操作，并在中登记所有从业务服务。当所有从业务服务的 try 操作都调用成功或者某个从业务服务的 try 操作失败，进入第二阶段。</li>\n<li>第二阶段：事务拦截器据第一阶段的执行结果来执行 confirm 或 cancel 操作。如果第一阶段所有 try 操作都成功，则事务拦截器调用所有从业务活动的 confirm操作。否则调用所有从业务服务的 cancel 操作。</li>\n</ul>\n<p>需要注意的是第二阶段 confirm 或 cancel 操作本身也是满足最终一致性的过程，在调用 confirm 或 cancel 的时候也可能因为某种原因（比如网络）导致调用失败，所以需要事务协调者支持重试的能力，同时这也就要求 confirm 和 cancel 操作具有幂等性。</p>\n<h2 id=\"%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B\">快速开始 <a class=\"header-anchor\" href=\"#%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B\">#</a></h2>\n<p><a href=\"/zh-cn/docs/tutorial/quickstart.html\">快速开始</a><br>\n<a href=\"/zh-cn/blog/tcc-transaction-2.x-release.html\">最新可用版本2.x</a></p>\n<h2 id=\"%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98\">常见问题 <a class=\"header-anchor\" href=\"#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98\">#</a></h2>\n<p><a href=\"/zh-cn/docs/faq.html\">常见问题</a></p>\n<h2 id=\"%E8%AE%A8%E8%AE%BA%E7%BE%A4\">讨论群 <a class=\"header-anchor\" href=\"#%E8%AE%A8%E8%AE%BA%E7%BE%A4\">#</a></h2>\n<p>钉钉扫码入群</p>\n<p><img src=\"/img/tcc-transaction-dingdingtalk.jpeg\" alt=\"钉钉扫码入群\"></p>\n",
  "link": "/zh-cn/docs/what-is-tcctransaction.html",
  "meta": {}
}