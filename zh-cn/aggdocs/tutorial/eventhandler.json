{
  "filename": "eventhandler.md",
  "__html": "<h1 id=\"%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E5%99%A8\">事件处理器 <a class=\"header-anchor\" href=\"#%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E5%99%A8\">#</a></h1>\n<p>事件处理器采用观察者模式，监听聚合根上发布事件的，并执行相应逻辑。借助事件处理器可以实现：</p>\n<ol>\n<li>聚合根间的依赖解耦。</li>\n<li>分离核心流程和分支流程。</li>\n<li>满足分布式场景下的数据一致性要求。</li>\n</ol>\n<p>可以通过在方法上添加<a href=\"/zh-cn/aggdocs/tutorial/api.html#%40EventHandler\">@EventHandler</a>来创建事件处理器。方法的入参有且仅有一个，是所需处理的事件类型（也可以是集合）。</p>\n<h2 id=\"%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B\">使用示例 <a class=\"header-anchor\" href=\"#%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B\">#</a></h2>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@Component</span>\n<span class=\"hljs-meta\">@Slf</span>4j\n<span class=\"hljs-keyword\">public</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AccountEventHandler</span> </span>{\n\n    <span class=\"hljs-meta\">@Autowired</span>\n    <span class=\"hljs-keyword\">private</span> AccountRepository accountRepository;\n\n    <span class=\"hljs-meta\">@EventHandler</span>(asynchronous = <span class=\"hljs-keyword\">true</span>, postAfterTransaction = <span class=\"hljs-keyword\">true</span>, isTransactionMessage = <span class=\"hljs-keyword\">true</span>,\n            asyncConfig = <span class=\"hljs-meta\">@AsyncConfig</span>(queueFullPolicy = QueueFullPolicy.DISCARD),\n            transactionCheck = <span class=\"hljs-meta\">@TransactionCheck</span>(checkTransactionStatusMethod = <span class=\"hljs-string\">\"checkAccountCreateEvent\"</span>))\n    <span class=\"hljs-meta\">@Transactional</span>(rollbackFor = Throwable<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>)\n    <span class=\"hljs-title\">public</span> <span class=\"hljs-title\">void</span> <span class=\"hljs-title\">handleAccountCreateEvent</span>(<span class=\"hljs-title\">AccountCreateEvent</span> <span class=\"hljs-title\">accountCreateEvent</span>) </span>{\n        log.info(<span class=\"hljs-string\">\"exec handleAccountCreateEvent，{}\"</span>, accountCreateEvent);\n        <span class=\"hljs-comment\">//业务逻辑</span>\n    }\n\n    <span class=\"hljs-meta\">@EventHandler</span>(asynchronous = <span class=\"hljs-keyword\">true</span>, postAfterTransaction = <span class=\"hljs-keyword\">true</span>, isTransactionMessage = <span class=\"hljs-keyword\">true</span>,\n            asyncConfig = <span class=\"hljs-meta\">@AsyncConfig</span>(queueFullPolicy = QueueFullPolicy.DISCARD),\n            transactionCheck = <span class=\"hljs-meta\">@TransactionCheck</span>(checkTransactionStatusMethod = <span class=\"hljs-string\">\"batchCheckAccountCreateEvent\"</span>))\n    <span class=\"hljs-meta\">@Transactional</span>(rollbackFor = Throwable<span class=\"hljs-class\">.<span class=\"hljs-keyword\">class</span>)\n    <span class=\"hljs-title\">public</span> <span class=\"hljs-title\">void</span> <span class=\"hljs-title\">batchHandleAccountCreateEvent</span>(<span class=\"hljs-title\">List</span>&lt;<span class=\"hljs-title\">AccountCreateEvent</span>&gt; <span class=\"hljs-title\">accountCreateEvents</span>) </span>{\n        log.info(<span class=\"hljs-string\">\"exec batchHandleAccountCreateEvent，{}\"</span>, accountCreateEvents);\n        <span class=\"hljs-comment\">//业务逻辑</span>\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">checkAccountCreateEvent</span><span class=\"hljs-params\">(AccountCreateEvent accountCreateEvent)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> accountRepository.findByAccountId(accountCreateEvent.getAccountId()) != <span class=\"hljs-keyword\">null</span>;\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">boolean</span> <span class=\"hljs-title\">batchCheckAccountCreateEvent</span><span class=\"hljs-params\">(List&lt;AccountCreateEvent&gt; accountCreateEvents)</span> </span>{\n        <span class=\"hljs-keyword\">return</span> !accountRepository.findByAccountIds(accountCreateEvents.stream().map(AccountCreateEvent::getAccountId).collect(Collectors.toList())).isEmpty();\n    }\n}\n</code></pre>\n<h2 id=\"%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86\">实现原理 <a class=\"header-anchor\" href=\"#%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86\">#</a></h2>\n<p><img src=\"../img/event_implementation.jpg\" alt=\"事件实现原理\"></p>\n",
  "link": "/zh-cn/aggdocs/tutorial/eventhandler.html",
  "meta": {}
}